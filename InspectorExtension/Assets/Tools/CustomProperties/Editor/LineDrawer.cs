using UnityEngine;using UnityEditor;namespace InspectorExtension.CustomProperties {	[CustomPropertyDrawer (typeof (LineAttribute))]	public class LineDrawer : DecoratorDrawer {		LineAttribute lineAttribute;		public override float GetHeight () {			return (attribute as LineAttribute).Height + 2.0f;		}		public override bool CanCacheInspectorGUI () {			return false;		}		public override void OnGUI (Rect position) {			lineAttribute = attribute as LineAttribute;			if (lineAttribute.Expanded) {				EditorGUI.DrawRect (					new Rect (position.x, position.y, position.width, lineAttribute.Height),					Color.black				);			} else {				switch (lineAttribute.Alignment) {				case 0:					EditorGUI.DrawRect (						new Rect (position.x, position.y, lineAttribute.Width, 1),						Color.black					);					break;				case 1:					EditorGUI.DrawRect (						new Rect (position.x + position.width - lineAttribute.Width, position.y, lineAttribute.Width, lineAttribute.Height),						Color.black					);					break;				case 2:					EditorGUI.DrawRect (						new Rect (position.x + position.width / 2 - lineAttribute.Width / 2, position.y, lineAttribute.Width, lineAttribute.Height),						Color.black					);					break;				}			}		}	}}